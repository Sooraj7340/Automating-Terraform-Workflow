pipeline {
    parameters {
        choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'Choose the Terraform action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION = 'us-east-1' 
    }

    agent any

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Sooraj7340/Automating-Terraform-Workflow.git'
            }
        }
        stage('Check AWS CLI Config') {
    steps {
        sh '''
            aws --version
            aws configure list
        '''
    }
}

        stage('Check Time') {
    steps {
        sh 'date'
    }
}



        stage('Check AWS Credentials') {
    steps {
        sh '''
            echo "AWS Access Key: $AWS_ACCESS_KEY_ID"
            echo "AWS Secret Key: $AWS_SECRET_ACCESS_KEY"
            aws sts get-caller-identity
        '''
    }
}
        

        stage('Plan') {
            steps {
                sh ''' 
                    cd terraform
                    terraform init
                    terraform plan -out=tfplan
                    terraform show -no-color tfplan > tfplan.txt
                '''
            }
        }

        stage('Approval') {
            steps {
                script {
                    def plan = readFile 'terraform/tfplan.txt'
                    input message: "Do you want to proceed with the Terraform action?",
                          parameters: [
                              text(name: 'Plan', description: 'Please review the code/plan once', defaultValue: plan)
                          ]
                }
            }
        }

        stage('Create/Destroy') {
            when {
                expression {
                    return params.terraformAction == 'apply' || params.terraformAction == 'destroy'
                }
            }
            steps {
                script {
                    dir('terraform') {
                        if (params.terraformAction == 'apply') {
                            sh 'terraform apply -input=false tfplan'
                        } else if (params.terraformAction == 'destroy') {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }
    }
}
